import { CallExpression, ForInStatement, ForOfStatement, ForStatement, LiteralBooleanExpression, LiteralNumericExpression, LiteralStringExpression, Node, StaticMemberExpression, WhileStatement } from 'shift-ast';
export declare type SimpleLiterals = LiteralBooleanExpression | LiteralNumericExpression | LiteralStringExpression;
export declare const literalNodes: (parent: Node) => SimpleLiterals[];
export declare const literalValues: (parent: Node) => (string | number | boolean)[];
export declare type SimpleLoops = ForStatement | ForInStatement | ForOfStatement | WhileStatement;
export declare const loopNodes: (parent: Node) => SimpleLoops[];
export declare const lastBlockNode: (parent: Node) => LiteralBooleanExpression | LiteralNumericExpression | LiteralStringExpression | import("shift-ast").ArrayAssignmentTarget | import("shift-ast").ArrayBinding | import("shift-ast").ArrayExpression | import("shift-ast").ArrowExpression | import("shift-ast").AssignmentExpression | import("shift-ast").AssignmentTargetIdentifier | import("shift-ast").AssignmentTargetPropertyIdentifier | import("shift-ast").AssignmentTargetPropertyProperty | import("shift-ast").AssignmentTargetWithDefault | import("shift-ast").AwaitExpression | import("shift-ast").BinaryExpression | import("shift-ast").BindingIdentifier | import("shift-ast").BindingPropertyIdentifier | import("shift-ast").BindingPropertyProperty | import("shift-ast").BindingWithDefault | import("shift-ast").Block | CallExpression | import("shift-ast").CatchClause | import("shift-ast").ClassElement | import("shift-ast").ClassExpression | import("shift-ast").CompoundAssignmentExpression | import("shift-ast").ComputedMemberAssignmentTarget | import("shift-ast").ComputedMemberExpression | import("shift-ast").ComputedPropertyName | import("shift-ast").ConditionalExpression | import("shift-ast").DataProperty | import("shift-ast").Directive | import("shift-ast").Export | import("shift-ast").ExportAllFrom | import("shift-ast").ExportDefault | import("shift-ast").ExportFrom | import("shift-ast").ExportFromSpecifier | import("shift-ast").ExportLocalSpecifier | import("shift-ast").ExportLocals | import("shift-ast").FormalParameters | import("shift-ast").FunctionBody | import("shift-ast").FunctionExpression | import("shift-ast").Getter | import("shift-ast").IdentifierExpression | import("shift-ast").Import | import("shift-ast").ImportNamespace | import("shift-ast").ImportSpecifier | import("shift-ast").LiteralInfinityExpression | import("shift-ast").LiteralNullExpression | import("shift-ast").LiteralRegExpExpression | import("shift-ast").Method | import("shift-ast").Module | import("shift-ast").NewExpression | import("shift-ast").NewTargetExpression | import("shift-ast").ObjectAssignmentTarget | import("shift-ast").ObjectBinding | import("shift-ast").ObjectExpression | import("shift-ast").Script | import("shift-ast").Setter | import("shift-ast").ShorthandProperty | import("shift-ast").SpreadElement | import("shift-ast").SpreadProperty | import("shift-ast").StaticMemberAssignmentTarget | StaticMemberExpression | import("shift-ast").StaticPropertyName | import("shift-ast").Super | import("shift-ast").SwitchCase | import("shift-ast").SwitchDefault | import("shift-ast").TemplateElement | import("shift-ast").TemplateExpression | import("shift-ast").ThisExpression | import("shift-ast").UnaryExpression | import("shift-ast").UpdateExpression | import("shift-ast").VariableDeclaration | import("shift-ast").VariableDeclarator | import("shift-ast").YieldExpression | import("shift-ast").YieldGeneratorExpression | import("shift-ast").Statement;
export interface MethodCall {
    call: CallExpression;
    callee: StaticMemberExpression;
}
export declare const methodCalls: (parent: Node) => MethodCall[];
